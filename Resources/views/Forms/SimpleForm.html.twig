<form action="{{action}}" enctype="{{encType}}" method="post" name="{{formId}}" id="{{formId}}">
    <div class="row">
        <div class="col-lg-9 col-md-9 col-sm-12 col-xs-12">
            <h1>{{title | default('')}}</h1>
            {% include defaultTemplate %}
            {% if captcha is defined %}
                {% include captcha['defaultTemplate'] with captcha only %}
            {% endif %}
            {{rest | raw}}
        </div>
        <div class="col-lg-3 col-md-3 hidden-sm hidden-xs">
                <div>
                    <div class="sergsxmui-tabs-navbar-buttons">
                        {% if readOnly == false %}
                            {% if backUrl is defined %}<button type="submit" class="btn btn-primary" name="back" value="true">{% trans from "sergsxmui" %}Save{% endtrans %}</button>{% endif %}
                            <button type="submit" class="btn btn-default">{% trans from "sergsxmui" %}Apply{% endtrans %}</button>
                        {% endif %}
                        {% if backUrl is defined %}<a href="{{backUrl}}" class="btn btn-default">{% trans from "sergsxmui" %}Cancel{% endtrans %}</a>{% endif %}
                    </div>
                    <ul class="nav nav-pills nav-stacked">
                        {% for group in groups %}
                            {% if group.description != '' %}
                                <li><a href="#{{group.groupId}}">{{group.description}}</a></li>
                            {% endif %}
                        {% endfor %}
                    </ul>
                </div>
        </div>
        <div class="hidden-lg hidden-md col-sm-12 col-xs-12">
            {% if readOnly == false %}
                {% if backUrl is defined %}<button type="submit" class="btn btn-primary" name="back" value="true">{% trans from "sergsxmui" %}Save{% endtrans %}</button>{% endif %}
                <button type="submit" class="btn btn-default">{% trans from "sergsxmui" %}Apply{% endtrans %}</button>
            {% endif %}
            {% if backUrl is defined %}<a href="{{backUrl}}" class="btn btn-default">{% trans from "sergsxmui" %}Cancel{% endtrans %}</a>{% endif %}
        </div>
    </div>
    <script>
        function formValidation_{{formId}} (element, log) {
            var form = document.forms['{{formId}}'];
            var errors = {};
            {{jsValidation | raw}}
            if (element != undefined) {
                var inputId = ($(element).data('replace-input-id') ? $(element).data('replace-input-id') : $(element).prop('id')), inputName = ($(element).data('replace-input-name') ? $(element).data('replace-input-name') : $(element).prop('name'));
                
                if (errors[inputName] != undefined) {
                    $('.'+inputId+'-container').addClass('has-error');
                    $('.'+inputId+'-error').text(errors[inputName]);
                } else {
                    $('.'+inputId+'-container').removeClass('has-error');
                    $('.'+inputId+'-error').text('');
                }
            } else {
                $('#{{formId}} .has-error').removeClass('has-error');
                $('#{{formId}} .form-error-text').text('');
                for (var input in errors) {
                    var inputId = ($(form[input]).data('replace-input-id') ? $(form[input]).data('replace-input-id') : $(form[input]).prop('id'));
                    $('.'+inputId+'-container').addClass('has-error');
                    $('.'+inputId+'-error').text(errors[input]);
                }
            }
            {{jsVisibility | raw}}
            if ((log != undefined) && (log == true)) {
                return errors;
            }
            if (!Object.keys) {
                Object.keys = function (obj) {
                    var arr = [], key;
                    for (key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            arr.push(key);
                        }
                    }
                    return arr;
                };
            }
            return !Object.keys(errors).length;
        }
        $(function () {
            if (($('#{{formId}} textarea.form-wysiwyg').length) && (tinymce != undefined) && (typeof tinymce === 'object')) {
                tinymce.init({
                    selector: "#{{formId}} textarea.form-wysiwyg",
                    locale: '{{app.request.locale}}',
                    plugins: [
                        "advlist autolink lists link image charmap print preview anchor",
                        "searchreplace visualblocks code fullscreen",
                        "insertdatetime media table contextmenu paste"
                    ],
                    toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image"
                });
            }
            $('#{{formId}} input.form-file-upload').change(function () {
                if ((this.files == undefined) || (this.files[0] == undefined)) {
                    return false;
                }
                var errors = formValidation_{{formId}}(this, true);
                if (errors[$(this).data('replace-input-name')] != undefined) {
                    return false;
                }
                $fileInput = $(this);
                $progressBar = $('<div />').css({
                    color: '#777',
                }).text('0 %').insertAfter(this);
                var file = this.files[0];
                var formData = new FormData();
                formData.append($fileInput.prop('name'), file);
                formData.append('form_id', '{{formId}}');
                formData.append('input_name', $fileInput.prop('name'));
                $.ajax({
                    url : '{{path('sergsxm_ui_file_upload')}}',
                    type : 'POST',
                    data : formData,
                    processData: false,
                    contentType: false,
                    cache: false,
                    xhr: function () {
                        var xhr = new window.XMLHttpRequest();
                        if (!xhr.upload) {
                            return xhr;
                        }
                        xhr.upload.addEventListener("progress", function (e) {
                            if (e.lengthComputable) {
                                var completed = e.loaded / e.total;
                                $progressBar.text(Math.ceil(completed * 100) + ' %');
                            }
                        }, false);
                        return xhr;
                    },
                    success: function (data) {
                        $fileInput.val('');
                        $filesContainer = $('#'+$fileInput.prop('id')+'-files');
                        $filesContainer.html('<input type="hidden" name="'+$filesContainer.data('input-name')+'" value="'+data.id+'" />'+data.fileName+' ('+data.size+' bytes)');
                    },
                    error: function (data) {
                        if (data.error) {
                            alert(data.error);
                        }
                    },
                    complete: function () {
                        $progressBar.remove();
                    }
                });
            });    
            $('#{{formId}} input, #{{formId}} textarea, #{{formId}} select').change(function () {
                formValidation_{{formId}}(this);
            });
            $('#{{formId}}').submit(function () {
                return formValidation_{{formId}}();               
            });
            var form = document.forms['{{formId}}'];
            {{jsVisibility | raw}}
        });
    </script>
</form>
